#-------------------------------#
#---------Tensors Basics--------#
#-------------------------------#
x.shape
np.random.normal(0,1,(3,5,2))
np.zeros(size)
np.ones(size)
np.empty((x_size, y_size))
np.zeros_like(other_array) #creates array filled with zeros with shape as other_array
np.asarray([0,0])
np.array((0,0))
np.array([[0,1], [1,2]])
r = np.arange(10) #creates array filled with range from 0 to n-1
r.dtype
np.ones(3, dtype='float32')
rnd_f = np.random.uniform(size=10).astype('float32')#astype creates array with type as specified by argument
small = grumpy[::8, ::8] #takes every 8th element
plt.imshow(grumpy[::-1]) #reverts first dimension
plt.imshow(grumpy[:,::-1]) #reverts second dimension

x_view.base #reference of original object
ar[n::m] = x # changes every m-th element starting from n-1 to x

grumpy_copy  =  grumpy.copy() #creates copy

#-------------------------------#
#--Tensors Shape Manipulations--#
#-------------------------------#
two_grumpies_portrait = np.concatenate((grumpy, grumpy), axis=0) #extends arrays on first dimension
two_grumpies_landscape = np.concatenate((grumpy, grumpy), axis=1)#extends arrays on second dimension

#splitting last "grumpy" dimension
red = grumpy[:,:,0]
green = grumpy[:,:,1]
blue  = grumpy[:,:,2]

#merge splited arrays as 3rd dimension
stacked_grumpy = np.stack((red, green, blue), axis=2)

#splits "grumpy"
chanels = np.split(grumpy,3,axis=2)

#get rid of last dimension
np.squeeze(stacked_grumpy2)

#returns copy of array in specified dimensions
ar3x4 = np.reshape(ar,(3,4))

#by passing -1 as one argument we can force numpy to determine itself what dimension it should be
ar2.reshape(-1,3)

#moveaxis switch axis specified by 2nd and 3rd argument
stacked_grumpy_right = np.moveaxis(stacked_grumpy_wrong, 0 ,2)

#-------------------------------#
#-----Tensors Computations------#
#-------------------------------#

#measures operation time
%time z = x * y

#sum elements in 2nd ax
row_sum = np.sum(data, axis=1)

#mean elements in 1st ax
np.mean(data, axis=0)

#standard deviation
np.std(data, axis=0)

#mean of values from 3rd dimension
np.mean(grumpy, axis=(0,1))

#inner takes two arrays and contracts last dimensions in each of them
np.inner(x,y)

np.dot(x,y)

#matrix multiplication
A = np.random.normal(0,1,(2,3))
B = np.random.normal(0,2,(3,4))
C = np.tensordot(A,B,1)

#matrix multiplication
A@B

#Zij = xi * yj for all i,j
x = np.arange(4)
y = np.arange(5)
z  = np.tensordot(x,y,0)

z  = np.outer(x,y)

#-------------------------------#
#-----Tensors Boradcasting------#
#-------------------------------#
#https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html
